{"version":3,"names":[],"mappings":"","sources":["sw.js"],"sourcesContent":["'use strict';\n\nvar staticCacheName = 'restaurant-cache';\nvar contentImgsCache = 'restaurant-content-imgs';\nvar allCaches = [\n  staticCacheName,\n  contentImgsCache,\n];\n\n\n/* Cache all url in the storage cache so that any page\n * that has been visited is accessible offline\n * staticCacheName is the variable storing the cache name\n*/\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(staticCacheName).then(function(cache) {\n      return cache.addAll([\n        '/',\n        'js/main_bundle.js',\n        'js/restaurant_bundle.js',\n        'css/styles.css',\n        'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2',\n        'https://fonts.googleapis.com/css?family=Roboto'\n      ]);\n    })\n  );\n});\n\n/* Remove the old cache */\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.filter(function(cacheName) {\n          return cacheName.startsWith('restaurant-') &&\n                 !allCaches.includes(cacheName);\n        })\n          .map(function(cacheName) {\n            return caches.delete(cacheName);\n          })\n      );\n    })\n  );\n});\n\n/* If a request doesn't match anything in the cache, get it from the network,\nsend it to the page and add it to the cache at the same time.*/\nself.addEventListener('fetch', function(event) {\n  var requestUrl = new URL(event.request.url);\n\n  // Don't use service worker caches for IndexDB based data.\n  if (requestUrl.pathname.startsWith('/restaurants/') ||\n      requestUrl.pathname.startsWith('/reviews/')) {\n    return;\n  }\n\n  if (requestUrl.pathname.startsWith('/img/')) {\n    event.respondWith(servePhoto(event.request));\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request).then(response => {\n      if (response) {\n        return response;\n      }\n      return fetch(event.request).then(networkResponse => {\n        return caches.open(staticCacheName).then(cache => {\n          if (response) return response;\n          cache.put(event.request.url, networkResponse.clone());\n          return networkResponse;\n        });\n      });\n    }).catch(error => {\n      console.log('Error', error);\n      return;\n    })\n  );\n});\n\n\nself.addEventListener('message', (event) => {\n  console.log('event', event);\n  if (event.data.action == 'skipWaiting') {\n    self.skipWaiting();\n  }\n});\n\nfunction servePhoto(request) {\n  return caches.open(contentImgsCache).then(function(cache) {\n    return cache.match(request).then(function(response) {\n      if (response) return response;\n\n      return fetch(request).then(function(networkResponse) {\n        cache.put(request, networkResponse.clone());\n        return networkResponse;\n      });\n    });\n  });\n}\n\n\n"],"file":"../sw.js"}